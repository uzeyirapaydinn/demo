@model EmailManagerModule.OtpTypesData
<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Otp Types Detail Form</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
     <div class="card" IsPageAvailable="true">
        <div class="card-body">
       
            
            
            <form bc-label-width-sm="4" bc-horizontal="true" id="formDetail" action="Detail" class="needs-validation" bc-validation="true">
                <form-group>
	<input type="text" bc-label="Id" asp-for="SelectedItem.Id" bc-static="true" />
</form-group>

<form-group>
	<input type="text" bc-label="Name" asp-for="SelectedItem.Name" bc-static="true" />
</form-group>

<form-group>
	<input type="text" bc-label="Template" asp-for="SelectedItem.Template" bc-static="true" />
</form-group>


                <hr class="col-xs-12">
                <div id="actionResultDiv">
                    <h5 id="actionResultMessage" style="color:red;font-weight: bold;">
                        Text Result
                    </h5>
                    <hr class="col-xs-12">
                </div>
                 <button type="button" data-dismiss="modal" class="btn float-right" bc-color="Primary">Close</button>
 
            </form>
        </div>
      
    </div>
    <div class="card" IsPageAvailable="false">
        @await Html.PartialAsync("_NotAuthorized")
    </div>

</div>
</div>
<script src="/js/bootstrap-toggle.js"></script>
<script>
        var fileData = {};
        $('.textarea-editor').summernote(
        {
            height: 200
        });
       
        window.addEventListener('load', (event) => {
            init();
        });

        $("img.lazyload").lazyload();

        function checkBoxChanged(cbox) {
            console.log('Changed ' + cbox.id);
            console.log('Changed ' + cbox.checked);
            var itemId = cbox.id.replace("cbox_", "").replace(".", "_");
            $("#" + itemId).val(cbox.checked);
        }

        $('.opButtonImageUpload').change(function (e) {
            var formData = new FormData($("#formUpdate")[0]);
            var reader = new FileReader();
            var imageId = '#' + this.id + 'Img';
            var realImageId = '' + this.id;
            imageId = imageId.replace('.', '_');
            
            reader.onload = function (event) {
              var image = new Image();
          
              image.onload=function(){
                  var imageMaxSize=1200;
                  var fileType = this.src.split(';')[0].split(':')[1];
                  
                  if(fileType.split('/').length>1 && fileType.split('/')[1] != 'gif'){
                      var canvas = document.createElement('canvas'),
                          max_size = imageMaxSize,// TODO : pull max size from a site config
                          width = image.width,
                          height = image.height;
                      if (width > height) {
                          if (width > max_size) {
                              height *= max_size / width;
                              width = max_size;
                          }
                      } else {
                          if (height > max_size) {
                              width *= max_size / height;
                              height = max_size;
                          }
                      }
                      canvas.width = width;
                      canvas.height = height;
    
                      canvas.getContext('2d').drawImage(image, 0, 0, width, height);
                      $(imageId).attr("src", canvas.toDataURL());
                      var resizedImage = createBlob(canvas.toDataURL());
                      var fileType = this.src.split(';')[0].split(':')[1];
                      var options = {
                            maxSizeMB: 1,
                            maxWidthOrHeight: imageMaxSize,
                            useWebWorker: true,
                            fileType: fileType,
                            initialQuality: 0.5
                      }
                  
                      imageCompression(resizedImage, options)
                            .then(function (compressedFile) {
                              fileData[realImageId] =  compressedFile;
                            })
                            .catch(function (error) {
                              console.log(error.message);
                            });
                    }
                  
              } 

              image.src=event.target.result;
            };

            reader.readAsDataURL(this.files[0]);
        });

     
        function createBlob(dataURL) {
          var BASE64_MARKER = ';base64,';
          if (dataURL.indexOf(BASE64_MARKER) == -1) {
            var parts = dataURL.split(',');
            var contentType = parts[0].split(':')[1];
            var raw = decodeURIComponent(parts[1]);
            return new Blob([raw], { type: contentType });
          }
          var parts = dataURL.split(BASE64_MARKER);
          var contentType = parts[0].split(':')[1];
          var raw = window.atob(parts[1]);
          var rawLength = raw.length;

          var uInt8Array = new Uint8Array(rawLength);

          for (var i = 0; i < rawLength; ++i) {
            uInt8Array[i] = raw.charCodeAt(i);
          }

          return new Blob([uInt8Array], { type: contentType });
        }

        var forms = document.getElementsByClassName('needs-validation');
        $("#formDetail").on('submit', function (e) {
            $("#actionResultDiv").hide();
            if ($("#formDetail").valid()) {
                var formData = new FormData(this);
                e.preventDefault(); // prevent the form's normal submission
                $("#actionResultDiv").show();
                $("#actionResultMessage").css('color', 'black');
                $("#actionResultMessage").text("Please wait...");
                Object.keys(fileData).forEach(function(fileKey) {
                    formData.set(fileKey, fileData[fileKey]);
                });
                
                addYamlEditorsToFormData(formData);
    
                let button = document.querySelector('button[type="submit"]');
                let formActionUrl = button.getAttribute('formaction');   
                
                $.ajax({
                    url: formActionUrl,
                    type: "POST",
                    dataType: "JSON",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response, status)
                    {
                        $("#actionResultDiv").show();
                        $("#actionResultMessage").css('color', 'green');
                        $("#actionResultMessage").text('Successfully Completed');
                        document.location.reload(true);
                        setTimeout(function () { $('#itemDetailsModal').modal('toggle'); }, 1100);
                    },
                    error: function (xhr, desc, error)
                    {
                        $("#actionResultMessage").css('color', 'red');
                        $("#actionResultMessage").text(error);
                    }
                });  
            }
        })

        var validation = Array.prototype.filter.call(forms, function (form) {
            form.addEventListener('submit', function (event) {

                if (form.checkValidity() === false) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        });


        setTimeout(function () {
            var validation = Array.prototype.filter.call(forms, function (form) {
                $("#actionResultDiv").hide();
                form.classList.add('was-validated');
            });
        }, 50);
</script>