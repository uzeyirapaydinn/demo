//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.SmsManagerModule.Application.Models;
using QuickCode.Demo.SmsManagerModule.Domain.Entities;
using QuickCode.Demo.SmsManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.SmsManagerModule.Persistence.Contexts;
using QuickCode.Demo.SmsManagerModule.Application.Dtos;

namespace QuickCode.Demo.SmsManagerModule.Persistence.Repositories
{
    public partial class SmsSendersRepository : ISmsSendersRepository
    {
        private readonly WriteDbContext _writeContext;
        private readonly ReadDbContext _readContext;
        private readonly ILogger<SmsSendersRepository> _logger;
        public SmsSendersRepository(ILogger<SmsSendersRepository> logger, WriteDbContext writeContext, ReadDbContext readContext)
        {
            _writeContext = writeContext;
            _readContext = readContext;
            _logger = logger;
        }

        public async Task<DLResponse<SmsSenders>> InsertAsync(SmsSenders value)
        {
            var returnValue = new DLResponse<SmsSenders>(value, "Not Defined");
            try
            {
                await _writeContext.SmsSenders.AddAsync(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = value;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "SmsSenders Insert", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                    returnValue.Value = value;
                }
                else
                {
                    returnValue.Code = 998;
                    returnValue.Value = value;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders Insert", ex.Message);
                returnValue.Code = 500;
                returnValue.Value = value;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> UpdateAsync(SmsSenders value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.Set<SmsSenders>().Update(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "SmsSenders Update", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> DeleteAsync(SmsSenders value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.SmsSenders.Remove(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "SmsSenders Delete", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders Delete", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<SmsSenders>> GetByPkAsync(int id)
        {
            var returnValue = new DLResponse<SmsSenders>();
            try
            {
                var result =
                    from sms_senders in _readContext.SmsSenders
                    where sms_senders.Id.Equals(id)select sms_senders;
                returnValue.Value = await result.FirstAsync();
                if (returnValue.Value == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in SmsSenders";
                    return returnValue;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders GetByPk", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<SmsSenders>>> ListAsync(int? pageNumber = null, int? pageSize = null)
        {
            var returnValue = new DLResponse<List<SmsSenders>>();
            try
            {
                if (pageNumber < 1)
                {
                    returnValue.Code = 404;
                    returnValue.Message = "Page Number must be greater than 1";
                }
                else
                {
                    if (pageNumber != null)
                    {
                        var skip = ((pageNumber - 1) * pageSize);
                        var take = pageSize;
                        returnValue.Value = await _readContext.SmsSenders.Skip(skip.Value).Take(take.Value).ToListAsync();
                    }
                    else
                    {
                        returnValue.Value = await _readContext.SmsSenders.ToListAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<int>> CountAsync()
        {
            var returnValue = new DLResponse<int>();
            try
            {
                returnValue.Value = await _readContext.SmsSenders.CountAsync();
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<SmsSendersInfoMessagesRestResponseDto>>> SmsSendersInfoMessagesRestAsync(int smsSendersId)
        {
            var returnValue = new DLResponse<List<SmsSendersInfoMessagesRestResponseDto>>();
            try
            {
                var queryableResult =
                    from info_messages in _readContext.InfoMessages
                    join sms_senders in _readContext.SmsSenders on info_messages.SmsSenderId equals sms_senders.Id
                    where sms_senders.Id.Equals(smsSendersId)select new SmsSendersInfoMessagesRestResponseDto()
                    {
                        Id = info_messages.Id,
                        SmsSenderId = info_messages.SmsSenderId,
                        InfoTypeId = info_messages.InfoTypeId,
                        GsmNumber = info_messages.GsmNumber,
                        Message = info_messages.Message,
                        MessageDate = info_messages.MessageDate,
                        MessageSid = info_messages.MessageSid,
                        DailyCounter = info_messages.DailyCounter
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders SmsSendersInfoMessagesRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<SmsSendersInfoMessagesKeyRestResponseDto>> SmsSendersInfoMessagesKeyRestAsync(int smsSendersId, int infoMessagesId)
        {
            var returnValue = new DLResponse<SmsSendersInfoMessagesKeyRestResponseDto>();
            try
            {
                var queryableResult =
                    from info_messages in _readContext.InfoMessages
                    join sms_senders in _readContext.SmsSenders on info_messages.SmsSenderId equals sms_senders.Id
                    where sms_senders.Id.Equals(smsSendersId) && info_messages.Id.Equals(infoMessagesId)select new SmsSendersInfoMessagesKeyRestResponseDto()
                    {
                        Id = info_messages.Id,
                        SmsSenderId = info_messages.SmsSenderId,
                        InfoTypeId = info_messages.InfoTypeId,
                        GsmNumber = info_messages.GsmNumber,
                        Message = info_messages.Message,
                        MessageDate = info_messages.MessageDate,
                        MessageSid = info_messages.MessageSid,
                        DailyCounter = info_messages.DailyCounter
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in SmsSenders";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders SmsSendersInfoMessagesKeyRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<SmsSendersOtpMessagesRestResponseDto>>> SmsSendersOtpMessagesRestAsync(int smsSendersId)
        {
            var returnValue = new DLResponse<List<SmsSendersOtpMessagesRestResponseDto>>();
            try
            {
                var queryableResult =
                    from otp_messages in _readContext.OtpMessages
                    join sms_senders in _readContext.SmsSenders on otp_messages.SmsSenderId equals sms_senders.Id
                    where sms_senders.Id.Equals(smsSendersId)select new SmsSendersOtpMessagesRestResponseDto()
                    {
                        Id = otp_messages.Id,
                        SmsSenderId = otp_messages.SmsSenderId,
                        OtpTypeId = otp_messages.OtpTypeId,
                        GsmNumber = otp_messages.GsmNumber,
                        OtpCode = otp_messages.OtpCode,
                        Message = otp_messages.Message,
                        ExpireSeconds = otp_messages.ExpireSeconds,
                        MessageDate = otp_messages.MessageDate,
                        MessageSid = otp_messages.MessageSid,
                        DailyCounter = otp_messages.DailyCounter
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders SmsSendersOtpMessagesRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<SmsSendersOtpMessagesKeyRestResponseDto>> SmsSendersOtpMessagesKeyRestAsync(int smsSendersId, int otpMessagesId)
        {
            var returnValue = new DLResponse<SmsSendersOtpMessagesKeyRestResponseDto>();
            try
            {
                var queryableResult =
                    from otp_messages in _readContext.OtpMessages
                    join sms_senders in _readContext.SmsSenders on otp_messages.SmsSenderId equals sms_senders.Id
                    where sms_senders.Id.Equals(smsSendersId) && otp_messages.Id.Equals(otpMessagesId)select new SmsSendersOtpMessagesKeyRestResponseDto()
                    {
                        Id = otp_messages.Id,
                        SmsSenderId = otp_messages.SmsSenderId,
                        OtpTypeId = otp_messages.OtpTypeId,
                        GsmNumber = otp_messages.GsmNumber,
                        OtpCode = otp_messages.OtpCode,
                        Message = otp_messages.Message,
                        ExpireSeconds = otp_messages.ExpireSeconds,
                        MessageDate = otp_messages.MessageDate,
                        MessageSid = otp_messages.MessageSid,
                        DailyCounter = otp_messages.DailyCounter
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in SmsSenders";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders SmsSendersOtpMessagesKeyRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<SmsSendersCampaignMessagesRestResponseDto>>> SmsSendersCampaignMessagesRestAsync(int smsSendersId)
        {
            var returnValue = new DLResponse<List<SmsSendersCampaignMessagesRestResponseDto>>();
            try
            {
                var queryableResult =
                    from campaign_messages in _readContext.CampaignMessages
                    join sms_senders in _readContext.SmsSenders on campaign_messages.SmsSenderId equals sms_senders.Id
                    where sms_senders.Id.Equals(smsSendersId)select new SmsSendersCampaignMessagesRestResponseDto()
                    {
                        Id = campaign_messages.Id,
                        SmsSenderId = campaign_messages.SmsSenderId,
                        CampaignTypeId = campaign_messages.CampaignTypeId,
                        GsmNumber = campaign_messages.GsmNumber,
                        Message = campaign_messages.Message,
                        MessageDate = campaign_messages.MessageDate,
                        MessageSid = campaign_messages.MessageSid,
                        DailyCounter = campaign_messages.DailyCounter
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders SmsSendersCampaignMessagesRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<SmsSendersCampaignMessagesKeyRestResponseDto>> SmsSendersCampaignMessagesKeyRestAsync(int smsSendersId, int campaignMessagesId)
        {
            var returnValue = new DLResponse<SmsSendersCampaignMessagesKeyRestResponseDto>();
            try
            {
                var queryableResult =
                    from campaign_messages in _readContext.CampaignMessages
                    join sms_senders in _readContext.SmsSenders on campaign_messages.SmsSenderId equals sms_senders.Id
                    where sms_senders.Id.Equals(smsSendersId) && campaign_messages.Id.Equals(campaignMessagesId)select new SmsSendersCampaignMessagesKeyRestResponseDto()
                    {
                        Id = campaign_messages.Id,
                        SmsSenderId = campaign_messages.SmsSenderId,
                        CampaignTypeId = campaign_messages.CampaignTypeId,
                        GsmNumber = campaign_messages.GsmNumber,
                        Message = campaign_messages.Message,
                        MessageDate = campaign_messages.MessageDate,
                        MessageSid = campaign_messages.MessageSid,
                        DailyCounter = campaign_messages.DailyCounter
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in SmsSenders";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "SmsSenders SmsSendersCampaignMessagesKeyRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }
    }
}