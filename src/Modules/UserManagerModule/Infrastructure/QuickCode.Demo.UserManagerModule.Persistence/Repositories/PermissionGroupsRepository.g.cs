//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.UserManagerModule.Application.Models;
using QuickCode.Demo.UserManagerModule.Domain.Entities;
using QuickCode.Demo.UserManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.UserManagerModule.Persistence.Contexts;
using QuickCode.Demo.UserManagerModule.Application.Dtos;

namespace QuickCode.Demo.UserManagerModule.Persistence.Repositories
{
    public partial class PermissionGroupsRepository : IPermissionGroupsRepository
    {
        private readonly WriteDbContext _writeContext;
        private readonly ReadDbContext _readContext;
        private readonly ILogger<PermissionGroupsRepository> _logger;
        public PermissionGroupsRepository(ILogger<PermissionGroupsRepository> logger, WriteDbContext writeContext, ReadDbContext readContext)
        {
            _writeContext = writeContext;
            _readContext = readContext;
            _logger = logger;
        }

        public async Task<DLResponse<PermissionGroups>> InsertAsync(PermissionGroups value)
        {
            var returnValue = new DLResponse<PermissionGroups>(value, "Not Defined");
            try
            {
                await _writeContext.PermissionGroups.AddAsync(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = value;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "PermissionGroups Insert", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                    returnValue.Value = value;
                }
                else
                {
                    returnValue.Code = 998;
                    returnValue.Value = value;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups Insert", ex.Message);
                returnValue.Code = 500;
                returnValue.Value = value;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> UpdateAsync(PermissionGroups value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.Set<PermissionGroups>().Update(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "PermissionGroups Update", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> DeleteAsync(PermissionGroups value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.PermissionGroups.Remove(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "PermissionGroups Delete", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups Delete", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<PermissionGroups>> GetByPkAsync(int id)
        {
            var returnValue = new DLResponse<PermissionGroups>();
            try
            {
                var result =
                    from permission_groups in _readContext.PermissionGroups
                    where permission_groups.Id.Equals(id)select permission_groups;
                returnValue.Value = await result.FirstAsync();
                if (returnValue.Value == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in PermissionGroups";
                    return returnValue;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups GetByPk", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<PermissionGroups>>> ListAsync(int? pageNumber = null, int? pageSize = null)
        {
            var returnValue = new DLResponse<List<PermissionGroups>>();
            try
            {
                if (pageNumber < 1)
                {
                    returnValue.Code = 404;
                    returnValue.Message = "Page Number must be greater than 1";
                }
                else
                {
                    if (pageNumber != null)
                    {
                        var skip = ((pageNumber - 1) * pageSize);
                        var take = pageSize;
                        returnValue.Value = await _readContext.PermissionGroups.Skip(skip.Value).Take(take.Value).ToListAsync();
                    }
                    else
                    {
                        returnValue.Value = await _readContext.PermissionGroups.ToListAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<int>> CountAsync()
        {
            var returnValue = new DLResponse<int>();
            try
            {
                returnValue.Value = await _readContext.PermissionGroups.CountAsync();
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<PermissionGroupsAspNetUsers_RESTResponseDto>>> PermissionGroupsAspNetUsers_RESTAsync(int permissionGroupsId)
        {
            var returnValue = new DLResponse<List<PermissionGroupsAspNetUsers_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from asp_net_users in _readContext.AspNetUsers
                    join permission_groups in _readContext.PermissionGroups on asp_net_users.PermissionGroupId equals permission_groups.Id
                    where permission_groups.Id.Equals(permissionGroupsId)select new PermissionGroupsAspNetUsers_RESTResponseDto()
                    {
                        Id = asp_net_users.Id,
                        FirstName = asp_net_users.FirstName,
                        LastName = asp_net_users.LastName,
                        PermissionGroupId = asp_net_users.PermissionGroupId,
                        UserName = asp_net_users.UserName,
                        NormalizedUserName = asp_net_users.NormalizedUserName,
                        Email = asp_net_users.Email,
                        NormalizedEmail = asp_net_users.NormalizedEmail,
                        EmailConfirmed = asp_net_users.EmailConfirmed,
                        PasswordHash = asp_net_users.PasswordHash,
                        SecurityStamp = asp_net_users.SecurityStamp,
                        ConcurrencyStamp = asp_net_users.ConcurrencyStamp,
                        PhoneNumber = asp_net_users.PhoneNumber,
                        PhoneNumberConfirmed = asp_net_users.PhoneNumberConfirmed,
                        TwoFactorEnabled = asp_net_users.TwoFactorEnabled,
                        LockoutEnd = asp_net_users.LockoutEnd,
                        LockoutEnabled = asp_net_users.LockoutEnabled,
                        AccessFailedCount = asp_net_users.AccessFailedCount
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups PermissionGroupsAspNetUsers_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<PermissionGroupsAspNetUsers_KEY_RESTResponseDto>> PermissionGroupsAspNetUsers_KEY_RESTAsync(int permissionGroupsId, string aspNetUsersId)
        {
            var returnValue = new DLResponse<PermissionGroupsAspNetUsers_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from asp_net_users in _readContext.AspNetUsers
                    join permission_groups in _readContext.PermissionGroups on asp_net_users.PermissionGroupId equals permission_groups.Id
                    where permission_groups.Id.Equals(permissionGroupsId) && asp_net_users.Id.Equals(aspNetUsersId)select new PermissionGroupsAspNetUsers_KEY_RESTResponseDto()
                    {
                        Id = asp_net_users.Id,
                        FirstName = asp_net_users.FirstName,
                        LastName = asp_net_users.LastName,
                        PermissionGroupId = asp_net_users.PermissionGroupId,
                        UserName = asp_net_users.UserName,
                        NormalizedUserName = asp_net_users.NormalizedUserName,
                        Email = asp_net_users.Email,
                        NormalizedEmail = asp_net_users.NormalizedEmail,
                        EmailConfirmed = asp_net_users.EmailConfirmed,
                        PasswordHash = asp_net_users.PasswordHash,
                        SecurityStamp = asp_net_users.SecurityStamp,
                        ConcurrencyStamp = asp_net_users.ConcurrencyStamp,
                        PhoneNumber = asp_net_users.PhoneNumber,
                        PhoneNumberConfirmed = asp_net_users.PhoneNumberConfirmed,
                        TwoFactorEnabled = asp_net_users.TwoFactorEnabled,
                        LockoutEnd = asp_net_users.LockoutEnd,
                        LockoutEnabled = asp_net_users.LockoutEnabled,
                        AccessFailedCount = asp_net_users.AccessFailedCount
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in PermissionGroups";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups PermissionGroupsAspNetUsers_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<PermissionGroupsPortalPermissionGroups_RESTResponseDto>>> PermissionGroupsPortalPermissionGroups_RESTAsync(int permissionGroupsId)
        {
            var returnValue = new DLResponse<List<PermissionGroupsPortalPermissionGroups_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from portal_permission_groups in _readContext.PortalPermissionGroups
                    join permission_groups in _readContext.PermissionGroups on portal_permission_groups.PermissionGroupId equals permission_groups.Id
                    where permission_groups.Id.Equals(permissionGroupsId)select new PermissionGroupsPortalPermissionGroups_RESTResponseDto()
                    {
                        Id = portal_permission_groups.Id,
                        PortalPermissionId = portal_permission_groups.PortalPermissionId,
                        PermissionGroupId = portal_permission_groups.PermissionGroupId,
                        PortalPermissionTypeId = portal_permission_groups.PortalPermissionTypeId
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups PermissionGroupsPortalPermissionGroups_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<PermissionGroupsPortalPermissionGroups_KEY_RESTResponseDto>> PermissionGroupsPortalPermissionGroups_KEY_RESTAsync(int permissionGroupsId, int portalPermissionGroupsId)
        {
            var returnValue = new DLResponse<PermissionGroupsPortalPermissionGroups_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from portal_permission_groups in _readContext.PortalPermissionGroups
                    join permission_groups in _readContext.PermissionGroups on portal_permission_groups.PermissionGroupId equals permission_groups.Id
                    where permission_groups.Id.Equals(permissionGroupsId) && portal_permission_groups.Id.Equals(portalPermissionGroupsId)select new PermissionGroupsPortalPermissionGroups_KEY_RESTResponseDto()
                    {
                        Id = portal_permission_groups.Id,
                        PortalPermissionId = portal_permission_groups.PortalPermissionId,
                        PermissionGroupId = portal_permission_groups.PermissionGroupId,
                        PortalPermissionTypeId = portal_permission_groups.PortalPermissionTypeId
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in PermissionGroups";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups PermissionGroupsPortalPermissionGroups_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<PermissionGroupsApiPermissionGroups_RESTResponseDto>>> PermissionGroupsApiPermissionGroups_RESTAsync(int permissionGroupsId)
        {
            var returnValue = new DLResponse<List<PermissionGroupsApiPermissionGroups_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from api_permission_groups in _readContext.ApiPermissionGroups
                    join permission_groups in _readContext.PermissionGroups on api_permission_groups.PermissionGroupId equals permission_groups.Id
                    where permission_groups.Id.Equals(permissionGroupsId)select new PermissionGroupsApiPermissionGroups_RESTResponseDto()
                    {
                        Id = api_permission_groups.Id,
                        PermissionGroupId = api_permission_groups.PermissionGroupId,
                        ApiMethodDefinitionId = api_permission_groups.ApiMethodDefinitionId
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups PermissionGroupsApiPermissionGroups_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<PermissionGroupsApiPermissionGroups_KEY_RESTResponseDto>> PermissionGroupsApiPermissionGroups_KEY_RESTAsync(int permissionGroupsId, int apiPermissionGroupsId)
        {
            var returnValue = new DLResponse<PermissionGroupsApiPermissionGroups_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from api_permission_groups in _readContext.ApiPermissionGroups
                    join permission_groups in _readContext.PermissionGroups on api_permission_groups.PermissionGroupId equals permission_groups.Id
                    where permission_groups.Id.Equals(permissionGroupsId) && api_permission_groups.Id.Equals(apiPermissionGroupsId)select new PermissionGroupsApiPermissionGroups_KEY_RESTResponseDto()
                    {
                        Id = api_permission_groups.Id,
                        PermissionGroupId = api_permission_groups.PermissionGroupId,
                        ApiMethodDefinitionId = api_permission_groups.ApiMethodDefinitionId
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in PermissionGroups";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "PermissionGroups PermissionGroupsApiPermissionGroups_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }
    }
}