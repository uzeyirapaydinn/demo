//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.UserManagerModule.Application.Models;
using QuickCode.Demo.UserManagerModule.Domain.Entities;
using QuickCode.Demo.UserManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.UserManagerModule.Persistence.Contexts;
using QuickCode.Demo.UserManagerModule.Application.Dtos;

namespace QuickCode.Demo.UserManagerModule.Persistence.Repositories
{
    public partial class ApiMethodDefinitionsRepository : IApiMethodDefinitionsRepository
    {
        private readonly WriteDbContext _writeContext;
        private readonly ReadDbContext _readContext;
        private readonly ILogger<ApiMethodDefinitionsRepository> _logger;
        public ApiMethodDefinitionsRepository(ILogger<ApiMethodDefinitionsRepository> logger, WriteDbContext writeContext, ReadDbContext readContext)
        {
            _writeContext = writeContext;
            _readContext = readContext;
            _logger = logger;
        }

        public async Task<DLResponse<ApiMethodDefinitions>> InsertAsync(ApiMethodDefinitions value)
        {
            var returnValue = new DLResponse<ApiMethodDefinitions>(value, "Not Defined");
            try
            {
                await _writeContext.ApiMethodDefinitions.AddAsync(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = value;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "ApiMethodDefinitions Insert", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                    returnValue.Value = value;
                }
                else
                {
                    returnValue.Code = 998;
                    returnValue.Value = value;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions Insert", ex.Message);
                returnValue.Code = 500;
                returnValue.Value = value;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> UpdateAsync(ApiMethodDefinitions value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.Set<ApiMethodDefinitions>().Update(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "ApiMethodDefinitions Update", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> DeleteAsync(ApiMethodDefinitions value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.ApiMethodDefinitions.Remove(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "ApiMethodDefinitions Delete", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions Delete", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<ApiMethodDefinitions>> GetByPkAsync(int id)
        {
            var returnValue = new DLResponse<ApiMethodDefinitions>();
            try
            {
                var result =
                    from api_method_definitions in _readContext.ApiMethodDefinitions
                    where api_method_definitions.Id.Equals(id)select api_method_definitions;
                returnValue.Value = await result.FirstAsync();
                if (returnValue.Value == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in ApiMethodDefinitions";
                    return returnValue;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions GetByPk", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<ApiMethodDefinitions>>> ListAsync(int? pageNumber = null, int? pageSize = null)
        {
            var returnValue = new DLResponse<List<ApiMethodDefinitions>>();
            try
            {
                if (pageNumber < 1)
                {
                    returnValue.Code = 404;
                    returnValue.Message = "Page Number must be greater than 1";
                }
                else
                {
                    if (pageNumber != null)
                    {
                        var skip = ((pageNumber - 1) * pageSize);
                        var take = pageSize;
                        returnValue.Value = await _readContext.ApiMethodDefinitions.Skip(skip.Value).Take(take.Value).ToListAsync();
                    }
                    else
                    {
                        returnValue.Value = await _readContext.ApiMethodDefinitions.ToListAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<int>> CountAsync()
        {
            var returnValue = new DLResponse<int>();
            try
            {
                returnValue.Value = await _readContext.ApiMethodDefinitions.CountAsync();
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<ApiMethodDefinitionsKafkaEvents_RESTResponseDto>>> ApiMethodDefinitionsKafkaEvents_RESTAsync(int apiMethodDefinitionsId)
        {
            var returnValue = new DLResponse<List<ApiMethodDefinitionsKafkaEvents_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from kafka_events in _readContext.KafkaEvents
                    join api_method_definitions in _readContext.ApiMethodDefinitions on kafka_events.ApiMethodDefinitionId equals api_method_definitions.Id
                    where api_method_definitions.Id.Equals(apiMethodDefinitionsId)select new ApiMethodDefinitionsKafkaEvents_RESTResponseDto()
                    {
                        Id = kafka_events.Id,
                        ApiMethodDefinitionId = kafka_events.ApiMethodDefinitionId,
                        TopicName = kafka_events.TopicName,
                        IsActive = kafka_events.IsActive
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions ApiMethodDefinitionsKafkaEvents_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<ApiMethodDefinitionsKafkaEvents_KEY_RESTResponseDto>> ApiMethodDefinitionsKafkaEvents_KEY_RESTAsync(int apiMethodDefinitionsId, int kafkaEventsId)
        {
            var returnValue = new DLResponse<ApiMethodDefinitionsKafkaEvents_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from kafka_events in _readContext.KafkaEvents
                    join api_method_definitions in _readContext.ApiMethodDefinitions on kafka_events.ApiMethodDefinitionId equals api_method_definitions.Id
                    where api_method_definitions.Id.Equals(apiMethodDefinitionsId) && kafka_events.Id.Equals(kafkaEventsId)select new ApiMethodDefinitionsKafkaEvents_KEY_RESTResponseDto()
                    {
                        Id = kafka_events.Id,
                        ApiMethodDefinitionId = kafka_events.ApiMethodDefinitionId,
                        TopicName = kafka_events.TopicName,
                        IsActive = kafka_events.IsActive
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in ApiMethodDefinitions";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions ApiMethodDefinitionsKafkaEvents_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<ApiMethodDefinitionsApiPermissionGroups_RESTResponseDto>>> ApiMethodDefinitionsApiPermissionGroups_RESTAsync(int apiMethodDefinitionsId)
        {
            var returnValue = new DLResponse<List<ApiMethodDefinitionsApiPermissionGroups_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from api_permission_groups in _readContext.ApiPermissionGroups
                    join api_method_definitions in _readContext.ApiMethodDefinitions on api_permission_groups.ApiMethodDefinitionId equals api_method_definitions.Id
                    where api_method_definitions.Id.Equals(apiMethodDefinitionsId)select new ApiMethodDefinitionsApiPermissionGroups_RESTResponseDto()
                    {
                        Id = api_permission_groups.Id,
                        PermissionGroupId = api_permission_groups.PermissionGroupId,
                        ApiMethodDefinitionId = api_permission_groups.ApiMethodDefinitionId
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions ApiMethodDefinitionsApiPermissionGroups_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<ApiMethodDefinitionsApiPermissionGroups_KEY_RESTResponseDto>> ApiMethodDefinitionsApiPermissionGroups_KEY_RESTAsync(int apiMethodDefinitionsId, int apiPermissionGroupsId)
        {
            var returnValue = new DLResponse<ApiMethodDefinitionsApiPermissionGroups_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from api_permission_groups in _readContext.ApiPermissionGroups
                    join api_method_definitions in _readContext.ApiMethodDefinitions on api_permission_groups.ApiMethodDefinitionId equals api_method_definitions.Id
                    where api_method_definitions.Id.Equals(apiMethodDefinitionsId) && api_permission_groups.Id.Equals(apiPermissionGroupsId)select new ApiMethodDefinitionsApiPermissionGroups_KEY_RESTResponseDto()
                    {
                        Id = api_permission_groups.Id,
                        PermissionGroupId = api_permission_groups.PermissionGroupId,
                        ApiMethodDefinitionId = api_permission_groups.ApiMethodDefinitionId
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in ApiMethodDefinitions";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "ApiMethodDefinitions ApiMethodDefinitionsApiPermissionGroups_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }
    }
}