//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.UserManagerModule.Application.Models;
using QuickCode.Demo.UserManagerModule.Domain.Entities;
using QuickCode.Demo.UserManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.UserManagerModule.Persistence.Contexts;
using QuickCode.Demo.UserManagerModule.Application.Dtos;

namespace QuickCode.Demo.UserManagerModule.Persistence.Repositories
{
    public partial class AspNetUsersRepository : IAspNetUsersRepository
    {
        private readonly WriteDbContext _writeContext;
        private readonly ReadDbContext _readContext;
        private readonly ILogger<AspNetUsersRepository> _logger;
        public AspNetUsersRepository(ILogger<AspNetUsersRepository> logger, WriteDbContext writeContext, ReadDbContext readContext)
        {
            _writeContext = writeContext;
            _readContext = readContext;
            _logger = logger;
        }

        public async Task<DLResponse<AspNetUsers>> InsertAsync(AspNetUsers value)
        {
            var returnValue = new DLResponse<AspNetUsers>(value, "Success");
            try
            {
                await _writeContext.AspNetUsers.AddAsync(value);
                await _writeContext.SaveChangesAsync();
                returnValue = new DLResponse<AspNetUsers>(value, "Success");
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "AspNetUsers Insert", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers Insert", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> UpdateAsync(AspNetUsers value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.Set<AspNetUsers>().Update(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "AspNetUsers Update", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> DeleteAsync(AspNetUsers value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.AspNetUsers.Remove(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "AspNetUsers Delete", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers Delete", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<AspNetUsers>> GetByPkAsync(string id)
        {
            var returnValue = new DLResponse<AspNetUsers>();
            try
            {
                var result =
                    from asp_net_users in _readContext.AspNetUsers
                    where asp_net_users.Id.Equals(id)select asp_net_users;
                returnValue.Value = await result.FirstAsync();
                if (returnValue.Value == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in AspNetUsers";
                    return returnValue;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers GetByPk", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<AspNetUsers>>> ListAsync(int? pageNumber = null, int? pageSize = null)
        {
            var returnValue = new DLResponse<List<AspNetUsers>>();
            try
            {
                if (pageNumber < 1)
                {
                    returnValue.Code = 404;
                    returnValue.Message = "Page Number must be greater than 1";
                }
                else
                {
                    if (pageNumber != null)
                    {
                        var skip = ((pageNumber - 1) * pageSize);
                        var take = pageSize;
                        returnValue.Value = await _readContext.AspNetUsers.Skip(skip.Value).Take(take.Value).ToListAsync();
                    }
                    else
                    {
                        returnValue.Value = await _readContext.AspNetUsers.ToListAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<int>> CountAsync()
        {
            var returnValue = new DLResponse<int>();
            try
            {
                returnValue.Value = await _readContext.AspNetUsers.CountAsync();
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<AspNetUsersGetUserResponseDto>> AspNetUsersGetUserAsync(string? aspNetUsersEmail)
        {
            var returnValue = new DLResponse<AspNetUsersGetUserResponseDto>();
            try
            {
                var queryableResult =
                    from asp_net_users in _readContext.AspNetUsers
                    where asp_net_users.Email.Equals(aspNetUsersEmail)select new AspNetUsersGetUserResponseDto()
                    {
                        Id = asp_net_users.Id,
                        FirstName = asp_net_users.FirstName,
                        LastName = asp_net_users.LastName,
                        PermissionGroupId = asp_net_users.PermissionGroupId,
                        UserName = asp_net_users.UserName,
                        NormalizedUserName = asp_net_users.NormalizedUserName,
                        Email = asp_net_users.Email,
                        NormalizedEmail = asp_net_users.NormalizedEmail,
                        EmailConfirmed = asp_net_users.EmailConfirmed,
                        PasswordHash = asp_net_users.PasswordHash,
                        SecurityStamp = asp_net_users.SecurityStamp,
                        ConcurrencyStamp = asp_net_users.ConcurrencyStamp,
                        PhoneNumber = asp_net_users.PhoneNumber,
                        PhoneNumberConfirmed = asp_net_users.PhoneNumberConfirmed,
                        TwoFactorEnabled = asp_net_users.TwoFactorEnabled,
                        LockoutEnd = asp_net_users.LockoutEnd,
                        LockoutEnabled = asp_net_users.LockoutEnabled,
                        AccessFailedCount = asp_net_users.AccessFailedCount
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in AspNetUsers";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersGetUser", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<AspNetUsersAspNetUserRoles_RESTResponseDto>>> AspNetUsersAspNetUserRoles_RESTAsync(string aspNetUsersId)
        {
            var returnValue = new DLResponse<List<AspNetUsersAspNetUserRoles_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from asp_net_user_roles in _readContext.AspNetUserRoles
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_roles.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId)select new AspNetUsersAspNetUserRoles_RESTResponseDto()
                    {
                        UserId = asp_net_user_roles.UserId,
                        RoleId = asp_net_user_roles.RoleId
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserRoles_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<AspNetUsersAspNetUserRoles_KEY_RESTResponseDto>> AspNetUsersAspNetUserRoles_KEY_RESTAsync(string aspNetUsersId, string aspNetUserRolesUserId)
        {
            var returnValue = new DLResponse<AspNetUsersAspNetUserRoles_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from asp_net_user_roles in _readContext.AspNetUserRoles
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_roles.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId) && asp_net_user_roles.UserId.Equals(aspNetUserRolesUserId)select new AspNetUsersAspNetUserRoles_KEY_RESTResponseDto()
                    {
                        UserId = asp_net_user_roles.UserId,
                        RoleId = asp_net_user_roles.RoleId
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in AspNetUsers";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserRoles_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<AspNetUsersAspNetUserClaims_RESTResponseDto>>> AspNetUsersAspNetUserClaims_RESTAsync(string aspNetUsersId)
        {
            var returnValue = new DLResponse<List<AspNetUsersAspNetUserClaims_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from asp_net_user_claims in _readContext.AspNetUserClaims
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_claims.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId)select new AspNetUsersAspNetUserClaims_RESTResponseDto()
                    {
                        Id = asp_net_user_claims.Id,
                        UserId = asp_net_user_claims.UserId,
                        ClaimType = asp_net_user_claims.ClaimType,
                        ClaimValue = asp_net_user_claims.ClaimValue
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserClaims_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<AspNetUsersAspNetUserClaims_KEY_RESTResponseDto>> AspNetUsersAspNetUserClaims_KEY_RESTAsync(string aspNetUsersId, int aspNetUserClaimsId)
        {
            var returnValue = new DLResponse<AspNetUsersAspNetUserClaims_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from asp_net_user_claims in _readContext.AspNetUserClaims
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_claims.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId) && asp_net_user_claims.Id.Equals(aspNetUserClaimsId)select new AspNetUsersAspNetUserClaims_KEY_RESTResponseDto()
                    {
                        Id = asp_net_user_claims.Id,
                        UserId = asp_net_user_claims.UserId,
                        ClaimType = asp_net_user_claims.ClaimType,
                        ClaimValue = asp_net_user_claims.ClaimValue
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in AspNetUsers";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserClaims_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<AspNetUsersAspNetUserTokens_RESTResponseDto>>> AspNetUsersAspNetUserTokens_RESTAsync(string aspNetUsersId)
        {
            var returnValue = new DLResponse<List<AspNetUsersAspNetUserTokens_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from asp_net_user_tokens in _readContext.AspNetUserTokens
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_tokens.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId)select new AspNetUsersAspNetUserTokens_RESTResponseDto()
                    {
                        UserId = asp_net_user_tokens.UserId,
                        LoginProvider = asp_net_user_tokens.LoginProvider,
                        Name = asp_net_user_tokens.Name,
                        Value = asp_net_user_tokens.Value
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserTokens_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<AspNetUsersAspNetUserTokens_KEY_RESTResponseDto>> AspNetUsersAspNetUserTokens_KEY_RESTAsync(string aspNetUsersId, string aspNetUserTokensUserId)
        {
            var returnValue = new DLResponse<AspNetUsersAspNetUserTokens_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from asp_net_user_tokens in _readContext.AspNetUserTokens
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_tokens.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId) && asp_net_user_tokens.UserId.Equals(aspNetUserTokensUserId)select new AspNetUsersAspNetUserTokens_KEY_RESTResponseDto()
                    {
                        UserId = asp_net_user_tokens.UserId,
                        LoginProvider = asp_net_user_tokens.LoginProvider,
                        Name = asp_net_user_tokens.Name,
                        Value = asp_net_user_tokens.Value
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in AspNetUsers";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserTokens_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<AspNetUsersAspNetUserLogins_RESTResponseDto>>> AspNetUsersAspNetUserLogins_RESTAsync(string aspNetUsersId)
        {
            var returnValue = new DLResponse<List<AspNetUsersAspNetUserLogins_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from asp_net_user_logins in _readContext.AspNetUserLogins
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_logins.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId)select new AspNetUsersAspNetUserLogins_RESTResponseDto()
                    {
                        LoginProvider = asp_net_user_logins.LoginProvider,
                        ProviderKey = asp_net_user_logins.ProviderKey,
                        ProviderDisplayName = asp_net_user_logins.ProviderDisplayName,
                        UserId = asp_net_user_logins.UserId
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserLogins_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<AspNetUsersAspNetUserLogins_KEY_RESTResponseDto>> AspNetUsersAspNetUserLogins_KEY_RESTAsync(string aspNetUsersId, string aspNetUserLoginsLoginProvider)
        {
            var returnValue = new DLResponse<AspNetUsersAspNetUserLogins_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from asp_net_user_logins in _readContext.AspNetUserLogins
                    join asp_net_users in _readContext.AspNetUsers on asp_net_user_logins.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId) && asp_net_user_logins.LoginProvider.Equals(aspNetUserLoginsLoginProvider)select new AspNetUsersAspNetUserLogins_KEY_RESTResponseDto()
                    {
                        LoginProvider = asp_net_user_logins.LoginProvider,
                        ProviderKey = asp_net_user_logins.ProviderKey,
                        ProviderDisplayName = asp_net_user_logins.ProviderDisplayName,
                        UserId = asp_net_user_logins.UserId
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in AspNetUsers";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersAspNetUserLogins_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<AspNetUsersRefreshTokens_RESTResponseDto>>> AspNetUsersRefreshTokens_RESTAsync(string aspNetUsersId)
        {
            var returnValue = new DLResponse<List<AspNetUsersRefreshTokens_RESTResponseDto>>();
            try
            {
                var queryableResult =
                    from refresh_tokens in _readContext.RefreshTokens
                    join asp_net_users in _readContext.AspNetUsers on refresh_tokens.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId)select new AspNetUsersRefreshTokens_RESTResponseDto()
                    {
                        Id = refresh_tokens.Id,
                        UserId = refresh_tokens.UserId,
                        Token = refresh_tokens.Token,
                        ExpiryDate = refresh_tokens.ExpiryDate,
                        CreatedDate = refresh_tokens.CreatedDate,
                        IsRevoked = refresh_tokens.IsRevoked
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersRefreshTokens_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<AspNetUsersRefreshTokens_KEY_RESTResponseDto>> AspNetUsersRefreshTokens_KEY_RESTAsync(string aspNetUsersId, int refreshTokensId)
        {
            var returnValue = new DLResponse<AspNetUsersRefreshTokens_KEY_RESTResponseDto>();
            try
            {
                var queryableResult =
                    from refresh_tokens in _readContext.RefreshTokens
                    join asp_net_users in _readContext.AspNetUsers on refresh_tokens.UserId equals asp_net_users.Id
                    where asp_net_users.Id.Equals(aspNetUsersId) && refresh_tokens.Id.Equals(refreshTokensId)select new AspNetUsersRefreshTokens_KEY_RESTResponseDto()
                    {
                        Id = refresh_tokens.Id,
                        UserId = refresh_tokens.UserId,
                        Token = refresh_tokens.Token,
                        ExpiryDate = refresh_tokens.ExpiryDate,
                        CreatedDate = refresh_tokens.CreatedDate,
                        IsRevoked = refresh_tokens.IsRevoked
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in AspNetUsers";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "AspNetUsers AspNetUsersRefreshTokens_KEY_REST", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }
    }
}