//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Demo.EmailManagerModule.Application.Models;
using QuickCode.Demo.EmailManagerModule.Domain.Entities;
using QuickCode.Demo.EmailManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Demo.EmailManagerModule.Persistence.Contexts;
using QuickCode.Demo.EmailManagerModule.Application.Dtos;

namespace QuickCode.Demo.EmailManagerModule.Persistence.Repositories
{
    public partial class EmailSendersRepository : IEmailSendersRepository
    {
        private readonly WriteDbContext _writeContext;
        private readonly ReadDbContext _readContext;
        private readonly ILogger<EmailSendersRepository> _logger;
        public EmailSendersRepository(ILogger<EmailSendersRepository> logger, WriteDbContext writeContext, ReadDbContext readContext)
        {
            _writeContext = writeContext;
            _readContext = readContext;
            _logger = logger;
        }

        public async Task<DLResponse<EmailSenders>> InsertAsync(EmailSenders value)
        {
            var returnValue = new DLResponse<EmailSenders>(value, "Not Defined");
            try
            {
                await _writeContext.EmailSenders.AddAsync(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = value;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "EmailSenders Insert", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                    returnValue.Value = value;
                }
                else
                {
                    returnValue.Code = 998;
                    returnValue.Value = value;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders Insert", ex.Message);
                returnValue.Code = 500;
                returnValue.Value = value;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> UpdateAsync(EmailSenders value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.Set<EmailSenders>().Update(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "EmailSenders Update", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> DeleteAsync(EmailSenders value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.EmailSenders.Remove(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "EmailSenders Delete", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders Delete", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<EmailSenders>> GetByPkAsync(int id)
        {
            var returnValue = new DLResponse<EmailSenders>();
            try
            {
                var result =
                    from email_senders in _readContext.EmailSenders
                    where email_senders.Id.Equals(id)select email_senders;
                returnValue.Value = await result.FirstAsync();
                if (returnValue.Value == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in EmailSenders";
                    return returnValue;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders GetByPk", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<EmailSenders>>> ListAsync(int? pageNumber = null, int? pageSize = null)
        {
            var returnValue = new DLResponse<List<EmailSenders>>();
            try
            {
                if (pageNumber < 1)
                {
                    returnValue.Code = 404;
                    returnValue.Message = "Page Number must be greater than 1";
                }
                else
                {
                    if (pageNumber != null)
                    {
                        var skip = ((pageNumber - 1) * pageSize);
                        var take = pageSize;
                        returnValue.Value = await _readContext.EmailSenders.Skip(skip.Value).Take(take.Value).ToListAsync();
                    }
                    else
                    {
                        returnValue.Value = await _readContext.EmailSenders.ToListAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<int>> CountAsync()
        {
            var returnValue = new DLResponse<int>();
            try
            {
                returnValue.Value = await _readContext.EmailSenders.CountAsync();
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<EmailSendersInfoMessagesRestResponseDto>>> EmailSendersInfoMessagesRestAsync(int emailSendersId)
        {
            var returnValue = new DLResponse<List<EmailSendersInfoMessagesRestResponseDto>>();
            try
            {
                var queryableResult =
                    from info_messages in _readContext.InfoMessages
                    join email_senders in _readContext.EmailSenders on info_messages.EmailSenderId equals email_senders.Id
                    where email_senders.Id.Equals(emailSendersId)select new EmailSendersInfoMessagesRestResponseDto()
                    {
                        Id = info_messages.Id,
                        EmailSenderId = info_messages.EmailSenderId,
                        InfoTypeId = info_messages.InfoTypeId,
                        GsmNumber = info_messages.GsmNumber,
                        Message = info_messages.Message,
                        MessageDate = info_messages.MessageDate,
                        MessageSid = info_messages.MessageSid,
                        DailyCounter = info_messages.DailyCounter
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders EmailSendersInfoMessagesRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<EmailSendersInfoMessagesKeyRestResponseDto>> EmailSendersInfoMessagesKeyRestAsync(int emailSendersId, int infoMessagesId)
        {
            var returnValue = new DLResponse<EmailSendersInfoMessagesKeyRestResponseDto>();
            try
            {
                var queryableResult =
                    from info_messages in _readContext.InfoMessages
                    join email_senders in _readContext.EmailSenders on info_messages.EmailSenderId equals email_senders.Id
                    where email_senders.Id.Equals(emailSendersId) && info_messages.Id.Equals(infoMessagesId)select new EmailSendersInfoMessagesKeyRestResponseDto()
                    {
                        Id = info_messages.Id,
                        EmailSenderId = info_messages.EmailSenderId,
                        InfoTypeId = info_messages.InfoTypeId,
                        GsmNumber = info_messages.GsmNumber,
                        Message = info_messages.Message,
                        MessageDate = info_messages.MessageDate,
                        MessageSid = info_messages.MessageSid,
                        DailyCounter = info_messages.DailyCounter
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in EmailSenders";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders EmailSendersInfoMessagesKeyRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<EmailSendersOtpMessagesRestResponseDto>>> EmailSendersOtpMessagesRestAsync(int emailSendersId)
        {
            var returnValue = new DLResponse<List<EmailSendersOtpMessagesRestResponseDto>>();
            try
            {
                var queryableResult =
                    from otp_messages in _readContext.OtpMessages
                    join email_senders in _readContext.EmailSenders on otp_messages.EmailSenderId equals email_senders.Id
                    where email_senders.Id.Equals(emailSendersId)select new EmailSendersOtpMessagesRestResponseDto()
                    {
                        Id = otp_messages.Id,
                        EmailSenderId = otp_messages.EmailSenderId,
                        OtpTypeId = otp_messages.OtpTypeId,
                        GsmNumber = otp_messages.GsmNumber,
                        OtpCode = otp_messages.OtpCode,
                        Message = otp_messages.Message,
                        ExpireSeconds = otp_messages.ExpireSeconds,
                        MessageDate = otp_messages.MessageDate,
                        MessageSid = otp_messages.MessageSid,
                        DailyCounter = otp_messages.DailyCounter
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders EmailSendersOtpMessagesRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<EmailSendersOtpMessagesKeyRestResponseDto>> EmailSendersOtpMessagesKeyRestAsync(int emailSendersId, int otpMessagesId)
        {
            var returnValue = new DLResponse<EmailSendersOtpMessagesKeyRestResponseDto>();
            try
            {
                var queryableResult =
                    from otp_messages in _readContext.OtpMessages
                    join email_senders in _readContext.EmailSenders on otp_messages.EmailSenderId equals email_senders.Id
                    where email_senders.Id.Equals(emailSendersId) && otp_messages.Id.Equals(otpMessagesId)select new EmailSendersOtpMessagesKeyRestResponseDto()
                    {
                        Id = otp_messages.Id,
                        EmailSenderId = otp_messages.EmailSenderId,
                        OtpTypeId = otp_messages.OtpTypeId,
                        GsmNumber = otp_messages.GsmNumber,
                        OtpCode = otp_messages.OtpCode,
                        Message = otp_messages.Message,
                        ExpireSeconds = otp_messages.ExpireSeconds,
                        MessageDate = otp_messages.MessageDate,
                        MessageSid = otp_messages.MessageSid,
                        DailyCounter = otp_messages.DailyCounter
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in EmailSenders";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders EmailSendersOtpMessagesKeyRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<EmailSendersCampaignMessagesRestResponseDto>>> EmailSendersCampaignMessagesRestAsync(int emailSendersId)
        {
            var returnValue = new DLResponse<List<EmailSendersCampaignMessagesRestResponseDto>>();
            try
            {
                var queryableResult =
                    from campaign_messages in _readContext.CampaignMessages
                    join email_senders in _readContext.EmailSenders on campaign_messages.EmailSenderId equals email_senders.Id
                    where email_senders.Id.Equals(emailSendersId)select new EmailSendersCampaignMessagesRestResponseDto()
                    {
                        Id = campaign_messages.Id,
                        EmailSenderId = campaign_messages.EmailSenderId,
                        CampaignTypeId = campaign_messages.CampaignTypeId,
                        GsmNumber = campaign_messages.GsmNumber,
                        Message = campaign_messages.Message,
                        MessageDate = campaign_messages.MessageDate,
                        MessageSid = campaign_messages.MessageSid,
                        DailyCounter = campaign_messages.DailyCounter
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders EmailSendersCampaignMessagesRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<EmailSendersCampaignMessagesKeyRestResponseDto>> EmailSendersCampaignMessagesKeyRestAsync(int emailSendersId, int campaignMessagesId)
        {
            var returnValue = new DLResponse<EmailSendersCampaignMessagesKeyRestResponseDto>();
            try
            {
                var queryableResult =
                    from campaign_messages in _readContext.CampaignMessages
                    join email_senders in _readContext.EmailSenders on campaign_messages.EmailSenderId equals email_senders.Id
                    where email_senders.Id.Equals(emailSendersId) && campaign_messages.Id.Equals(campaignMessagesId)select new EmailSendersCampaignMessagesKeyRestResponseDto()
                    {
                        Id = campaign_messages.Id,
                        EmailSenderId = campaign_messages.EmailSenderId,
                        CampaignTypeId = campaign_messages.CampaignTypeId,
                        GsmNumber = campaign_messages.GsmNumber,
                        Message = campaign_messages.Message,
                        MessageDate = campaign_messages.MessageDate,
                        MessageSid = campaign_messages.MessageSid,
                        DailyCounter = campaign_messages.DailyCounter
                    };
                var result = await queryableResult.FirstAsync();
                if (result == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in EmailSenders";
                }
                else
                {
                    returnValue.Value = result;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "EmailSenders EmailSendersCampaignMessagesKeyRest", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }
    }
}