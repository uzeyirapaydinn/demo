//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace QuickCode.Demo.Common.Nswag.Clients.EmailManagerModuleApi.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICampaignMessagesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CampaignMessagesDto>> CampaignMessagesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignMessagesDto> CampaignMessagesPostAsync(CampaignMessagesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignMessagesDto> CampaignMessagesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignMessagesPutAsync(int id, CampaignMessagesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignMessagesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICampaignTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CampaignTypesDto>> CampaignTypesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignTypesDto> CampaignTypesPostAsync(CampaignTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignTypesDto> CampaignTypesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignTypesPutAsync(int id, CampaignTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CampaignTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CampaignTypesCampaignMessagesRestResponseDto>> CampaignMessagesGetAsync(int campaignTypesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignTypesCampaignMessagesKeyRestResponseDto> CampaignMessagesGetAsync(int campaignTypesId, int campaignMessagesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEmailSendersClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EmailSendersDto>> EmailSendersGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmailSendersDto> EmailSendersPostAsync(EmailSendersDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmailSendersDto> EmailSendersGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmailSendersPutAsync(int id, EmailSendersDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmailSendersDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EmailSendersInfoMessagesRestResponseDto>> InfoMessagesGetAsync(int emailSendersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmailSendersInfoMessagesKeyRestResponseDto> InfoMessagesGetAsync(int emailSendersId, int infoMessagesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EmailSendersOtpMessagesRestResponseDto>> OtpMessagesGetAsync(int emailSendersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmailSendersOtpMessagesKeyRestResponseDto> OtpMessagesGetAsync(int emailSendersId, int otpMessagesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EmailSendersCampaignMessagesRestResponseDto>> CampaignMessagesGetAsync(int emailSendersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmailSendersCampaignMessagesKeyRestResponseDto> CampaignMessagesGetAsync(int emailSendersId, int campaignMessagesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IInfoMessagesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InfoMessagesDto>> InfoMessagesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoMessagesDto> InfoMessagesPostAsync(InfoMessagesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoMessagesDto> InfoMessagesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoMessagesPutAsync(int id, InfoMessagesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoMessagesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IInfoTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InfoTypesDto>> InfoTypesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoTypesDto> InfoTypesPostAsync(InfoTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoTypesDto> InfoTypesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoTypesPutAsync(int id, InfoTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> InfoTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InfoTypesInfoMessagesRestResponseDto>> InfoMessagesGetAsync(int infoTypesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoTypesInfoMessagesKeyRestResponseDto> InfoMessagesGetAsync(int infoTypesId, int infoMessagesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOtpMessagesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OtpMessagesDto>> OtpMessagesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpMessagesDto> OtpMessagesPostAsync(OtpMessagesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpMessagesDto> OtpMessagesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpMessagesPutAsync(int id, OtpMessagesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpMessagesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOtpTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OtpTypesDto>> OtpTypesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpTypesDto> OtpTypesPostAsync(OtpTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpTypesDto> OtpTypesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpTypesPutAsync(int id, OtpTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OtpTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OtpTypesOtpMessagesRestResponseDto>> OtpMessagesGetAsync(int otpTypesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OtpTypesOtpMessagesKeyRestResponseDto> OtpMessagesGetAsync(int otpTypesId, int otpMessagesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignMessagesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CampaignMessagesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CampaignMessagesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignTypesCampaignMessagesKeyRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CampaignTypesCampaignMessagesKeyRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CampaignTypesCampaignMessagesKeyRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignTypesCampaignMessagesRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CampaignTypesCampaignMessagesRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CampaignTypesCampaignMessagesRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignTypesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        public string Template { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CampaignTypesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<CampaignTypesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSendersCampaignMessagesKeyRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSendersCampaignMessagesKeyRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSendersCampaignMessagesKeyRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSendersCampaignMessagesRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("campaignTypeId")]
        public int CampaignTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSendersCampaignMessagesRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSendersCampaignMessagesRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSendersDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerName")]
        public string ProviderName { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSendersDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSendersDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSendersInfoMessagesKeyRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSendersInfoMessagesKeyRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSendersInfoMessagesKeyRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSendersInfoMessagesRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSendersInfoMessagesRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSendersInfoMessagesRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSendersOtpMessagesKeyRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSendersOtpMessagesKeyRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSendersOtpMessagesKeyRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSendersOtpMessagesRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EmailSendersOtpMessagesRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<EmailSendersOtpMessagesRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoMessagesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoMessagesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoMessagesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoTypesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        public string Template { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoTypesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoTypesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoTypesInfoMessagesKeyRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoTypesInfoMessagesKeyRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoTypesInfoMessagesKeyRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoTypesInfoMessagesRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypeId")]
        public int InfoTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoTypesInfoMessagesRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoTypesInfoMessagesRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtpMessagesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OtpMessagesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<OtpMessagesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtpTypesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        public string Template { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OtpTypesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<OtpTypesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtpTypesOtpMessagesKeyRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OtpTypesOtpMessagesKeyRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<OtpTypesOtpMessagesKeyRestResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtpTypesOtpMessagesRestResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailSenderId")]
        public int EmailSenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpTypeId")]
        public int OtpTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gsmNumber")]
        public string GsmNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otpCode")]
        public string OtpCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expireSeconds")]
        public int ExpireSeconds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageDate")]
        public System.DateTime? MessageDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSid")]
        public string MessageSid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyCounter")]
        public int DailyCounter { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OtpTypesOtpMessagesRestResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<OtpTypesOtpMessagesRestResponseDto>(data, options);

        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625