//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace QuickCode.Demo.Common.Nswag.Clients.UserManagerModuleApi.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiMethodDefinitionsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiModulePermissionsResponse> GetApiPermissionsAsync(int permissionGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponse> UpdateApiPermissionAsync(UpdateApiPermissionGroupRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiMethodDefinitionsDto>> ApiMethodDefinitionsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiMethodDefinitionsDto> ApiMethodDefinitionsPostAsync(ApiMethodDefinitionsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiMethodDefinitionsDto> ApiMethodDefinitionsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiMethodDefinitionsPutAsync(int id, ApiMethodDefinitionsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiMethodDefinitionsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiMethodDefinitionsKafkaEvents_RESTResponseDto>> KafkaEventsGetAsync(int apiMethodDefinitionsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiMethodDefinitionsKafkaEvents_KEY_RESTResponseDto> KafkaEventsGetAsync(int apiMethodDefinitionsId, int kafkaEventsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiMethodDefinitionsApiPermissionGroups_RESTResponseDto>> ApiPermissionGroupsGetAsync(int apiMethodDefinitionsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiMethodDefinitionsApiPermissionGroups_KEY_RESTResponseDto> ApiPermissionGroupsGetAsync(int apiMethodDefinitionsId, int apiPermissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiPermissionGroupsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiPermissionGroupsDto>> ApiPermissionGroupsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiPermissionGroupsDto> ApiPermissionGroupsPostAsync(ApiPermissionGroupsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiPermissionGroupsDto> ApiPermissionGroupsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiPermissionGroupsPutAsync(int id, ApiPermissionGroupsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApiPermissionGroupsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiPermissionGroupsGetApiPermissionGroupsResponseDto>> GetApiPermissionGroupsAsync(int apiPermissionGroupsPermissionGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ApiPermissionGroupsGetApiPermissionGroupResponseDto>> GetApiPermissionGroupAsync(int apiPermissionGroupsPermissionGroupId, int apiPermissionGroupsApiMethodDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetRoleClaimsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetRoleClaimsDto>> AspNetRoleClaimsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRoleClaimsDto> AspNetRoleClaimsPostAsync(AspNetRoleClaimsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRoleClaimsDto> AspNetRoleClaimsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRoleClaimsPutAsync(int id, AspNetRoleClaimsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRoleClaimsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetRolesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetRolesDto>> AspNetRolesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRolesDto> AspNetRolesPostAsync(AspNetRolesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRolesDto> AspNetRolesGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRolesPutAsync(string id, AspNetRolesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetRolesDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetRolesAspNetUserRoles_RESTResponseDto>> AspNetUserRolesGetAsync(string aspNetRolesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRolesAspNetUserRoles_KEY_RESTResponseDto> AspNetUserRolesGetAsync(string aspNetRolesId, string aspNetUserRolesUserId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetRolesAspNetRoleClaims_RESTResponseDto>> AspNetRoleClaimsGetAsync(string aspNetRolesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetRolesAspNetRoleClaims_KEY_RESTResponseDto> AspNetRoleClaimsGetAsync(string aspNetRolesId, int aspNetRoleClaimsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserClaimsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserClaimsDto>> AspNetUserClaimsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserClaimsDto> AspNetUserClaimsPostAsync(AspNetUserClaimsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserClaimsDto> AspNetUserClaimsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserClaimsPutAsync(int id, AspNetUserClaimsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserClaimsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserLoginsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserLoginsDto>> AspNetUserLoginsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserLoginsDto> AspNetUserLoginsPostAsync(AspNetUserLoginsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserLoginsDto> AspNetUserLoginsGetAsync(string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserLoginsPutAsync(string loginProvider, string providerKey, AspNetUserLoginsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserLoginsDeleteAsync(string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserRolesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserRolesDto>> AspNetUserRolesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserRolesDto> AspNetUserRolesPostAsync(AspNetUserRolesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserRolesDto> AspNetUserRolesGetAsync(string userId, string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserRolesPutAsync(string userId, string roleId, AspNetUserRolesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserRolesDeleteAsync(string userId, string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUsersClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUsersDto>> AspNetUsersGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersDto> AspNetUsersPostAsync(AspNetUsersDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersDto> AspNetUsersGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUsersPutAsync(string id, AspNetUsersDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUsersDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersGetUserResponseDto> GetUserAsync(string aspNetUsersEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUsersAspNetUserRoles_RESTResponseDto>> AspNetUserRolesGetAsync(string aspNetUsersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersAspNetUserRoles_KEY_RESTResponseDto> AspNetUserRolesGetAsync(string aspNetUsersId, string aspNetUserRolesUserId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUsersAspNetUserClaims_RESTResponseDto>> AspNetUserClaimsGetAsync(string aspNetUsersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersAspNetUserClaims_KEY_RESTResponseDto> AspNetUserClaimsGetAsync(string aspNetUsersId, int aspNetUserClaimsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUsersAspNetUserTokens_RESTResponseDto>> AspNetUserTokensGetAsync(string aspNetUsersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersAspNetUserTokens_KEY_RESTResponseDto> AspNetUserTokensGetAsync(string aspNetUsersId, string aspNetUserTokensUserId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUsersAspNetUserLogins_RESTResponseDto>> AspNetUserLoginsGetAsync(string aspNetUsersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersAspNetUserLogins_KEY_RESTResponseDto> AspNetUserLoginsGetAsync(string aspNetUsersId, string aspNetUserLoginsLoginProvider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUsersRefreshTokens_RESTResponseDto>> RefreshTokensGetAsync(string aspNetUsersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUsersRefreshTokens_KEY_RESTResponseDto> RefreshTokensGetAsync(string aspNetUsersId, int refreshTokensId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAspNetUserTokensClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AspNetUserTokensDto>> AspNetUserTokensGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserTokensDto> AspNetUserTokensPostAsync(AspNetUserTokensDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AspNetUserTokensDto> AspNetUserTokensGetAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserTokensPutAsync(string userId, AspNetUserTokensDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> AspNetUserTokensDeleteAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAuthenticationsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterAsync(RegisterRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(LoginRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ValidateAsync(string body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(RefreshRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConfirmEmailAsync(string userId = null, string code = null, string changedEmail = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResendConfirmationEmailAsync(ResendConfirmationEmailRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForgotPasswordAsync(ForgotPasswordRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetPasswordAsync(ResetPasswordRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorResponse> User2faAsync(TwoFactorRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoResponse> InfoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InfoResponse> InfoPostAsync(InfoRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IColumnTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ColumnTypesDto>> ColumnTypesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ColumnTypesDto> ColumnTypesPostAsync(ColumnTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ColumnTypesDto> ColumnTypesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ColumnTypesPutAsync(int id, ColumnTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ColumnTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IKafkaEventsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<KafkaEventsDto>> KafkaEventsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KafkaEventsDto> KafkaEventsPostAsync(KafkaEventsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KafkaEventsDto> KafkaEventsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> KafkaEventsPutAsync(int id, KafkaEventsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> KafkaEventsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<KafkaEventsGetKafkaEventsResponseDto>> GetKafkaEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<KafkaEventsGetActiveKafkaEventsResponseDto>> GetActiveKafkaEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<KafkaEventsGetTopicWorkflowsResponseDto>> GetTopicWorkflowsAsync(string kafkaEventsTopicName, string apiMethodDefinitionsHttpMethod, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<KafkaEventsTopicWorkflows_RESTResponseDto>> TopicWorkflowsGetAsync(int kafkaEventsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KafkaEventsTopicWorkflows_KEY_RESTResponseDto> TopicWorkflowsGetAsync(int kafkaEventsId, int topicWorkflowsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPermissionGroupsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PermissionGroupsDto>> PermissionGroupsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGroupsDto> PermissionGroupsPostAsync(PermissionGroupsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGroupsDto> PermissionGroupsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PermissionGroupsPutAsync(int id, PermissionGroupsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PermissionGroupsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PermissionGroupsAspNetUsers_RESTResponseDto>> AspNetUsersGetAsync(int permissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGroupsAspNetUsers_KEY_RESTResponseDto> AspNetUsersGetAsync(int permissionGroupsId, string aspNetUsersId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PermissionGroupsPortalPermissionGroups_RESTResponseDto>> PortalPermissionGroupsGetAsync(int permissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGroupsPortalPermissionGroups_KEY_RESTResponseDto> PortalPermissionGroupsGetAsync(int permissionGroupsId, int portalPermissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PermissionGroupsApiPermissionGroups_RESTResponseDto>> ApiPermissionGroupsGetAsync(int permissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGroupsApiPermissionGroups_KEY_RESTResponseDto> ApiPermissionGroupsGetAsync(int permissionGroupsId, int apiPermissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalMenusClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalMenusDto>> PortalMenusGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalMenusDto> PortalMenusPostAsync(PortalMenusDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalMenusDto> PortalMenusGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalMenusPutAsync(int id, PortalMenusDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalMenusDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalPermissionGroupsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionGroupsDto>> PortalPermissionGroupsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionGroupsDto> PortalPermissionGroupsPostAsync(PortalPermissionGroupsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionGroupsDto> PortalPermissionGroupsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionGroupsPutAsync(int id, PortalPermissionGroupsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionGroupsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionGroupsGetPortalPermissionGroupsResponseDto>> GetPortalPermissionGroupsAsync(int portalPermissionGroupsPermissionGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionGroupsGetPortalPermissionGroupResponseDto>> GetPortalPermissionGroupAsync(int portalPermissionGroupsPortalPermissionId, int portalPermissionGroupsPermissionGroupId, int portalPermissionGroupsPortalPermissionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalPermissionsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionGroupListResponse> GetPortalPermissionsAsync(int permissionGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponse> UpdatePortalPermissionAsync(UpdatePortalPermissionGroupRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionsDto>> PortalPermissionsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionsDto> PortalPermissionsPostAsync(PortalPermissionsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionsDto> PortalPermissionsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionsPutAsync(int id, PortalPermissionsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionsPortalPermissionGroups_RESTResponseDto>> PortalPermissionGroupsGetAsync(int portalPermissionsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionsPortalPermissionGroups_KEY_RESTResponseDto> PortalPermissionGroupsGetAsync(int portalPermissionsId, int portalPermissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPortalPermissionTypesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionTypesDto>> PortalPermissionTypesGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionTypesDto> PortalPermissionTypesPostAsync(PortalPermissionTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionTypesDto> PortalPermissionTypesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionTypesPutAsync(int id, PortalPermissionTypesDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> PortalPermissionTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PortalPermissionTypesPortalPermissionGroups_RESTResponseDto>> PortalPermissionGroupsGetAsync(int portalPermissionTypesId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalPermissionTypesPortalPermissionGroups_KEY_RESTResponseDto> PortalPermissionGroupsGetAsync(int portalPermissionTypesId, int portalPermissionGroupsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IRefreshTokensClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<RefreshTokensDto>> RefreshTokensGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefreshTokensDto> RefreshTokensPostAsync(RefreshTokensDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefreshTokensDto> RefreshTokensGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> RefreshTokensPutAsync(int id, RefreshTokensDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> RefreshTokensDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RefreshTokensGetRefreshTokenResponseDto> GetRefreshTokenAsync(string refreshTokensToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> UpdateRefreshTokenAsync(string refreshTokensToken, RefreshTokensUpdateRefreshTokenRequestDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITableComboboxSettingsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TableComboboxSettingsDto>> TableComboboxSettingsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TableComboboxSettingsDto> TableComboboxSettingsPostAsync(TableComboboxSettingsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TableComboboxSettingsDto> TableComboboxSettingsGetAsync(string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TableComboboxSettingsPutAsync(string tableName, TableComboboxSettingsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TableComboboxSettingsDeleteAsync(string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITopicWorkflowsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TopicWorkflowsDto>> TopicWorkflowsGetAsync(int? page = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TopicWorkflowsDto> TopicWorkflowsPostAsync(TopicWorkflowsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TopicWorkflowsDto> TopicWorkflowsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TopicWorkflowsPutAsync(int id, TopicWorkflowsDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> TopicWorkflowsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TopicWorkflowsGetWorkflowsResponseDto>> GetWorkflowsAsync(int topicWorkflowsKafkaEventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="QuickCode.Demo.Common.Model.QuickCodeSwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TopicWorkflowsGetTopicWorkflowsResponseDto>> GetTopicWorkflowsAsync(string kafkaEventsTopicName, string apiMethodDefinitionsHttpMethod, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessTokenResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokenType")]
        public string TokenType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessToken")]
        public string AccessToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiresIn")]
        public long ExpiresIn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
        public string RefreshToken { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AccessTokenResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AccessTokenResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        public string HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string Path { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("itemType")]
        public string ItemType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public bool Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionsApiPermissionGroups_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionsApiPermissionGroups_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionsApiPermissionGroups_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionsApiPermissionGroups_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionsApiPermissionGroups_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionsApiPermissionGroups_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        public string HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string Path { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("itemType")]
        public string ItemType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionsKafkaEvents_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionsKafkaEvents_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionsKafkaEvents_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMethodDefinitionsKafkaEvents_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMethodDefinitionsKafkaEvents_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiMethodDefinitionsKafkaEvents_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiModulePermissions
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiModulePermissionList")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<ApiMethodDefinitionItem>>> ApiModulePermissionList { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiModulePermissions FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiModulePermissions>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiModulePermissionsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public ApiModulePermissions Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiModulePermissionsResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiModulePermissionsResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPermissionGroupsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPermissionGroupsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiPermissionGroupsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPermissionGroupsGetApiPermissionGroupResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPermissionGroupsGetApiPermissionGroupResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiPermissionGroupsGetApiPermissionGroupResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPermissionGroupsGetApiPermissionGroupsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPermissionGroupsGetApiPermissionGroupsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ApiPermissionGroupsGetApiPermissionGroupsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRoleClaimsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRoleClaimsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRoleClaimsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRolesAspNetRoleClaims_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRolesAspNetRoleClaims_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRolesAspNetRoleClaims_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRolesAspNetRoleClaims_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRolesAspNetRoleClaims_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRolesAspNetRoleClaims_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRolesAspNetUserRoles_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRolesAspNetUserRoles_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRolesAspNetUserRoles_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRolesAspNetUserRoles_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRolesAspNetUserRoles_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRolesAspNetUserRoles_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetRolesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedName")]
        public string NormalizedName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetRolesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetRolesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserClaimsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserClaimsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserClaimsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserLoginsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerKey")]
        public string ProviderKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerDisplayName")]
        public string ProviderDisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserLoginsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserLoginsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserRolesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserRolesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserRolesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUserTokensDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUserTokensDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUserTokensDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserClaims_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserClaims_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserClaims_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserClaims_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimType")]
        public string ClaimType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimValue")]
        public string ClaimValue { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserClaims_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserClaims_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserLogins_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerKey")]
        public string ProviderKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerDisplayName")]
        public string ProviderDisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserLogins_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserLogins_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserLogins_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerKey")]
        public string ProviderKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerDisplayName")]
        public string ProviderDisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserLogins_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserLogins_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserRoles_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserRoles_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserRoles_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserRoles_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserRoles_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserRoles_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserTokens_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserTokens_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserTokens_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersAspNetUserTokens_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loginProvider")]
        public string LoginProvider { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersAspNetUserTokens_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersAspNetUserTokens_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]
        public string NormalizedUserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]
        public string NormalizedEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]
        public string PasswordHash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]
        public string SecurityStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]
        public bool TwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]
        public System.DateTime? LockoutEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]
        public bool LockoutEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]
        public int AccessFailedCount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersGetUserResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]
        public string NormalizedUserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]
        public string NormalizedEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]
        public string PasswordHash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]
        public string SecurityStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]
        public bool TwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]
        public System.DateTime? LockoutEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]
        public bool LockoutEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]
        public int AccessFailedCount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersGetUserResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersGetUserResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersRefreshTokens_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRevoked")]
        public bool IsRevoked { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersRefreshTokens_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersRefreshTokens_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AspNetUsersRefreshTokens_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRevoked")]
        public bool IsRevoked { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AspNetUsersRefreshTokens_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<AspNetUsersRefreshTokens_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BooleanResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public bool Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BooleanResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<BooleanResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ColumnTypesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeName")]
        public string TypeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iosComponentName")]
        public string IosComponentName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iosType")]
        public string IosType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iconCode")]
        public string IconCode { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ColumnTypesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ColumnTypesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForgotPasswordRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ForgotPasswordRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ForgotPasswordRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("newEmail")]
        public string NewEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]
        public string NewPassword { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oldPassword")]
        public string OldPassword { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InfoResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isEmailConfirmed")]
        public bool IsEmailConfirmed { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InfoResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<InfoResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KafkaEventsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KafkaEventsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<KafkaEventsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KafkaEventsGetActiveKafkaEventsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        public string HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string Path { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KafkaEventsGetActiveKafkaEventsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<KafkaEventsGetActiveKafkaEventsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KafkaEventsGetKafkaEventsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topicName")]
        public string TopicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]
        public string HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("controllerName")]
        public string ControllerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string Path { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KafkaEventsGetKafkaEventsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<KafkaEventsGetKafkaEventsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KafkaEventsGetTopicWorkflowsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventId")]
        public int KafkaEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KafkaEventsGetTopicWorkflowsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<KafkaEventsGetTopicWorkflowsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KafkaEventsTopicWorkflows_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventId")]
        public int KafkaEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KafkaEventsTopicWorkflows_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<KafkaEventsTopicWorkflows_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KafkaEventsTopicWorkflows_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventId")]
        public int KafkaEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KafkaEventsTopicWorkflows_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<KafkaEventsTopicWorkflows_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string Password { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]
        public string TwoFactorCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorRecoveryCode")]
        public string TwoFactorRecoveryCode { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static LoginRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<LoginRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupsApiPermissionGroups_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupsApiPermissionGroups_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupsApiPermissionGroups_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupsApiPermissionGroups_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupsApiPermissionGroups_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupsApiPermissionGroups_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupsAspNetUsers_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]
        public string NormalizedUserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]
        public string NormalizedEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]
        public string PasswordHash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]
        public string SecurityStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]
        public bool TwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]
        public System.DateTime? LockoutEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]
        public bool LockoutEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]
        public int AccessFailedCount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupsAspNetUsers_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupsAspNetUsers_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupsAspNetUsers_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]
        public string NormalizedUserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]
        public string NormalizedEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]
        public string PasswordHash { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]
        public string SecurityStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]
        public string ConcurrencyStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]
        public bool TwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]
        public System.DateTime? LockoutEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]
        public bool LockoutEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]
        public int AccessFailedCount { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupsAspNetUsers_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupsAspNetUsers_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupsPortalPermissionGroups_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupsPortalPermissionGroups_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupsPortalPermissionGroups_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionGroupsPortalPermissionGroups_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PermissionGroupsPortalPermissionGroups_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PermissionGroupsPortalPermissionGroups_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalMenusDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tooltip")]
        public string Tooltip { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionName")]
        public string ActionName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderNo")]
        public int OrderNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentName")]
        public string ParentName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("itemType")]
        public string ItemType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalMenusDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalMenusDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionGroupList
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissions")]
        public System.Collections.ObjectModel.ObservableCollection<PortalPermissionItem> PortalPermissions { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionGroupList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionGroupList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionGroupListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public PortalPermissionGroupList Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionGroupListResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionGroupListResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionGroupsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionGroupsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionGroupsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionGroupsGetPortalPermissionGroupResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionGroupsGetPortalPermissionGroupResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionGroupsGetPortalPermissionGroupResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionGroupsGetPortalPermissionGroupsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionGroupsGetPortalPermissionGroupsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionGroupsGetPortalPermissionGroupsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermssionId")]
        public int PortalPermssionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypes")]
        public System.Collections.ObjectModel.ObservableCollection<PortalPermissionTypeItem> PortalPermissionTypes { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionTypeItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalPermssionTypeId")]
        public int PortalPermssionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public bool Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionTypeItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionTypeItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionTypesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionTypesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionTypesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionTypesPortalPermissionGroups_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionTypesPortalPermissionGroups_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionTypesPortalPermissionGroups_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionTypesPortalPermissionGroups_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionTypesPortalPermissionGroups_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionTypesPortalPermissionGroups_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("itemType")]
        public string ItemType { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionsPortalPermissionGroups_KEY_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionsPortalPermissionGroups_KEY_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionsPortalPermissionGroups_KEY_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalPermissionsPortalPermissionGroups_RESTResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PortalPermissionsPortalPermissionGroups_RESTResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<PortalPermissionsPortalPermissionGroups_RESTResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
        public string RefreshToken { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RefreshRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RefreshRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokensDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRevoked")]
        public bool IsRevoked { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RefreshTokensDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RefreshTokensDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokensGetRefreshTokenResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTime CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isRevoked")]
        public bool IsRevoked { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RefreshTokensGetRefreshTokenResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RefreshTokensGetRefreshTokenResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokensUpdateRefreshTokenRequestDto
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RefreshTokensUpdateRefreshTokenRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RefreshTokensUpdateRefreshTokenRequestDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string Password { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RegisterRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<RegisterRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResendConfirmationEmailRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ResendConfirmationEmailRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ResendConfirmationEmailRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResetPasswordRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetCode")]
        public string ResetCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]
        public string NewPassword { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ResetPasswordRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<ResetPasswordRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TableComboboxSettingsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("tableName")]
        public string TableName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("idColumn")]
        public string IdColumn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("textColumns")]
        public string TextColumns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stringFormat")]
        public string StringFormat { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TableComboboxSettingsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TableComboboxSettingsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicWorkflowsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventId")]
        public int KafkaEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TopicWorkflowsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TopicWorkflowsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicWorkflowsGetTopicWorkflowsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventId")]
        public int KafkaEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TopicWorkflowsGetTopicWorkflowsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TopicWorkflowsGetTopicWorkflowsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicWorkflowsGetWorkflowsResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kafkaEventId")]
        public int KafkaEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workflowContent")]
        public string WorkflowContent { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TopicWorkflowsGetWorkflowsResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TopicWorkflowsGetWorkflowsResponseDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("enable")]
        public bool? Enable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]
        public string TwoFactorCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetSharedKey")]
        public bool ResetSharedKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetRecoveryCodes")]
        public bool ResetRecoveryCodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("forgetMachine")]
        public bool ForgetMachine { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TwoFactorRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TwoFactorRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("sharedKey")]
        public string SharedKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodesLeft")]
        public int RecoveryCodesLeft { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodes")]
        public System.Collections.ObjectModel.ObservableCollection<string> RecoveryCodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isTwoFactorEnabled")]
        public bool IsTwoFactorEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMachineRemembered")]
        public bool IsMachineRemembered { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TwoFactorResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<TwoFactorResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateApiPermissionGroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiMethodDefinitionId")]
        public int ApiMethodDefinitionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public int Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdateApiPermissionGroupRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdateApiPermissionGroupRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePortalPermissionGroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissionGroupId")]
        public int PermissionGroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionId")]
        public int PortalPermissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("portalPermissionTypeId")]
        public int PortalPermissionTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public int Value { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UpdatePortalPermissionGroupRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            var converters = new System.Text.Json.Serialization.JsonConverter[] { new System.Text.Json.Serialization.JsonStringEnumConverter() };
            foreach(var converter in converters)
                options.Converters.Add(converter);

            return System.Text.Json.JsonSerializer.Deserialize<UpdatePortalPermissionGroupRequest>(data, options);

        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625